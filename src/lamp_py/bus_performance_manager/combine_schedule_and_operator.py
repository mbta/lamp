from datetime import date, datetime
import dataframely as dy
import polars as pl
from lamp_py.bus_performance_manager.events_metrics import BusPerformanceMetrics
import random


def combine_schedule_and_run_id_operator_id(
    bus_metrics: dy.DataFrame[BusPerformanceMetrics], daily_work: pl.DataFrame
) -> tuple[pl.DataFrame, pl.DataFrame]:
    """
    write_me
    """
    # create a daily unique mapping between operator badge and a randomized public identifier to tie together runs/trips and operators
    public_operator_id_map = create_public_operator_id_map(daily_work)

    # join the mapping back with the daily_work dataframe to associate the public identifier with an operator
    daily_with_public_operator_id = daily_work.join(
        public_operator_id_map, on=["operator_badge_number", "service_date"], how="left"
    )

    # join all on trip_id and vehicle to add run_id and public_operator_id for every trip
    output_bus_metrics = bus_metrics.join(
        daily_with_public_operator_id.select("tm_run_id", "tm_trip_id", "tm_vehicle_label", "public_operator_id"),
        left_on=["trip_id", "vehicle_label"],
        right_on=["tm_trip_id", "tm_vehicle_label"],
        how="left",
    ).rename({"tm_run_id": "run_id"})

    return output_bus_metrics, daily_with_public_operator_id


def create_public_operator_id_map(daily_work: pl.DataFrame) -> pl.DataFrame:
    """
    Identifiers generated are unstable and depend on the timestamp during which they were generated. These are
    used to tie together the internal operator badge number with the public facing public_operator_id via the
    mapping generated by this method
    """
    random.seed(datetime.now().timestamp())

    operator_id_mapping = (
        daily_work.select("operator_badge_number", "service_date")
        .drop_nulls()
        .unique()
        .with_columns(
            pl.concat_str(
                [
                    pl.col("service_date").dt.to_string(format="%Y%m%d"),
                    pl.Series(
                        random.sample(
                            range(10000, 99999), daily_work["operator_badge_number"].drop_nulls().unique().len()
                        )
                    ).cast(pl.String),
                ]
            )
            .cast(pl.Int64)
            .alias("public_operator_id")
        )
    )
    return operator_id_mapping
