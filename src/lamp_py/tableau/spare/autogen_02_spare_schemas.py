
from polars import Schema
from polars import String, Int16, Int32, Int64, UInt8, UInt16, UInt32, UInt64, List, Struct, Boolean, Categorical, Float64
### admins ###
spare_raw_input_schema_admins =  Schema({'id': String, 'createdAt': Int64, 'updatedAt': Int64, 'email': String, 'firstName': String, 'lastName': String, 'lastSeenTs': Int64, 'roles': List(Categorical), 'phoneNumber': String})
### appointmentTypes ###
spare_raw_input_schema_appointmentTypes =  Schema({'id': String, 'createdAt': Int64, 'updatedAt': Int64, 'key': String, 'nylasConfigId': String, 'adminIds': List(String), 'caseTypeId': String, 'formId': String, 'status': String, 'theme': String, 'title': String, 'description': String, 'duration': Int64, 'availability': String, 'location': String, 'emailsDisabled': Boolean})
### appointments_with_history ###
spare_raw_input_schema_appointments_with_history =  Schema({'id': String, 'createdAt': Int64, 'updatedAt': Int64, 'appointmentTypeId': Categorical, 'caseId': String, 'caseFormId': String, 'adminId': String, 'bookingId': String, 'eventId': String, 'startTs': Int64, 'endTs': Int64, 'status': Categorical})
### caseForms_with_history ###
spare_raw_input_schema_caseForms_with_history =  Schema({'id': String, 'createdAt': Int64, 'updatedAt': Int64, 'caseId': String, 'formId': Categorical, 'metadata': String, 'smartScanFile.id': String, 'smartScanFile.size': Int64, 'smartScanFile.name': String, 'smartScanFile.format': Categorical})
### caseLetters ###
spare_raw_input_schema_caseLetters =  Schema({'id': String, 'createdAt': Int64, 'updatedAt': Int64, 'caseId': String, 'letterId': Categorical, 'file.id': String, 'file.size': Int64, 'file.name': String, 'file.format': Categorical, 'creatorId': String, 'status': Categorical, 'sentStatus': Categorical, 'sentTs': Int64, 'sentById': String, 'mailingAddress': String})
### caseLetters_with_history ###
spare_raw_input_schema_caseLetters_with_history =  Schema({'id': String, 'createdAt': Int64, 'updatedAt': Int64, 'caseId': String, 'letterId': Categorical, 'file.id': String, 'file.size': Int64, 'file.name': String, 'file.format': Categorical, 'creatorId': String, 'status': Categorical, 'sentStatus': Categorical, 'sentTs': Int64, 'sentById': String, 'mailingAddress': String})
### caseStatuses ###
spare_raw_input_schema_caseStatuses =  Schema({'id': String, 'createdAt': Int64, 'updatedAt': Int64, 'caseTypeId': String, 'status': String, 'stage': String, 'label': String, 'key': String, 'order': String, 'theme': String, 'riderInterfaceLabel': String})
### caseTypes ###
spare_raw_input_schema_caseTypes =  Schema({'id': String, 'createdAt': Int64, 'updatedAt': Int64, 'key': String, 'name': String, 'status': String, 'timerLimitTs': Int64, 'riderInterfaceVisibility': Boolean, 'riderInterfaceName': String, 'defaultFormKey': String, 'product': String, 'summaryPrompt': String})
### cases_with_history ###
spare_raw_input_schema_cases_with_history =  Schema({'id': String, 'createdAt': Int64, 'updatedAt': Int64, 'lastActivityAt': Int64, 'userId': String, 'caseTypeId': Categorical, 'statusId': Categorical, 'assignedTo': String, 'note': String, 'timerLimitTs': Int64, 'timerEvent': List(Struct({'type': String, 'eventTs': Int64})), 'timerDeadlineTs': Int64, 'isArchived': Boolean, 'createdInterface': Categorical, 'priority': Categorical})
### charges_with_history ###
spare_raw_input_schema_charges_with_history =  Schema({'id': String, 'createdAt': Int64, 'updatedAt': Int64, 'amount': Int64, 'currency': Categorical, 'refundReason': String, 'refundedTs': Int64, 'status': Categorical, 'userId': String, 'paymentMethodId': String, 'externalId': String, 'externalData': String, 'requestId': String, 'farePassAllocationId': String, 'walletId': String, 'ticketId': String, 'groupChargeId': String, 'childChargeIds': List(String)})
### constraintOverrideActions_with_history ###
spare_raw_input_schema_constraintOverrideActions_with_history =  Schema({'id': String, 'createdAt': Int64, 'updatedAt': Int64, 'requestId': String, 'authorId': String, 'actorType': Categorical})
### drivers ###
spare_raw_input_schema_drivers =  Schema({'id': String, 'createdAt': Int64, 'updatedAt': Int64, 'username': String, 'firstName': String, 'lastName': String, 'photoUrl': String, 'phoneNumber': String, 'rating': Float64, 'numRatings': Int64, 'driverForFleetId': String, 'lastSeenTs': Int64, 'metadata': String, 'metadata.driverId': Int64, 'metadata.middleInitial': String, 'metadata.providerId': Categorical, 'metadata.driverEmergencyContactName': String, 'metadata.driverEmergencyContactPhoneNumber': String, 'metadata.status': Categorical, 'status': Categorical, 'providerId': String})
### duties_with_history ###
spare_raw_input_schema_duties_with_history =  Schema({'id': String, 'createdAt': Int64, 'updatedAt': Int64, 'identifier': String, 'fleetId': String, 'fleet.name': String, 'vehicleId': String, 'vehicle.identifier': String, 'vehicle.licensePlate': String, 'vehicle.vehicleTypeId': Categorical, 'driverId': String, 'startRequestedTs': Int64, 'endRequestedTs': Int64, 'status': Categorical, 'startFlexibility': Int64, 'startLocation.longitude': Float64, 'startLocation.latitude': Float64, 'startAddress': String, 'endFlexibility': Int64, 'endLocation.longitude': Float64, 'endLocation.latitude': Float64, 'endAddress': String, 'isDeletable': Boolean, 'isMatchingEnabled': Boolean, 'hasVehicleConflict': Boolean, 'hasDriverConflict': Boolean, 'matchingDisabledEndTs': Int64, 'matchingLogic': Categorical, 'lateness': Int64, 'ownerType': Categorical, 'externalDriverData.firstName': String, 'externalDriverData.photoUrl': String, 'externalDriverData.phoneNumber': String, 'appVersion': String, 'deviceOS': String, 'metadata': String, 'metrics.firstSeenInServiceAreaTs': Int64, 'metrics.lastSeenInServiceAreaTs': Int64, 'metrics.totalRevenueHoursS': Int64, 'metrics.totalRevenueHoursSV2': Int64, 'metrics.totalBreakLengthS': Int64, 'metrics.totalInProgressPauseLengthS': Int64, 'metrics.totalTravelDistanceM': Int64, 'metrics.totalDistanceWithoutRidersM': Int64, 'metrics.totalRevenueDistanceM': Int64, 'metrics.totalBreakDistanceM': Int64, 'cancellationDetails.id': String, 'cancellationDetails.createdAt': Int64, 'cancellationDetails.updatedAt': Int64, 'cancellationDetails.cancelledBy': Categorical, 'cancellationDetails.reason': Categorical, 'cancellationDetails.notes': String})
### favoriteLocations ###
spare_raw_input_schema_favoriteLocations =  Schema({'id': String, 'createdAt': Int64, 'updatedAt': Int64, 'address': String, 'location.longitude': Float64, 'location.latitude': Float64, 'type': Categorical, 'userId': String, 'name': String, 'locationNotes': String})
### favoriteLocations_with_history ###
spare_raw_input_schema_favoriteLocations_with_history =  Schema({'id': String, 'createdAt': Int64, 'updatedAt': Int64, 'address': String, 'location.longitude': Float64, 'location.latitude': Float64, 'type': Categorical, 'userId': String, 'name': String, 'locationNotes': String})
### fleets ###
spare_raw_input_schema_fleets =  Schema({'id': String, 'createdAt': Int64, 'updatedAt': Int64, 'name': String, 'type': String, 'status': String, 'systemEfficiencyRatio': Float64, 'waitVsDetourTimeRatio': Float64, 'driverWaitTimeThreshold': Int64, 'allowOverbooking': Boolean, 'linkedServices': List(Struct({'id': String})), 'externalDispatchProvider': String, 'breakPolicyId': String, 'agreementRequired': Boolean, 'configurationId': String, 'area': String, 'metadata': String})
### forms ###
spare_raw_input_schema_forms =  Schema({'id': String, 'createdAt': Int64, 'updatedAt': Int64, 'name': String, 'displayName': String, 'description': String, 'key': String, 'caseTypeId': String, 'fieldGroupId': String, 'status': String, 'type': String, 'order': String})
### groupConditions ###
spare_raw_input_schema_groupConditions =  Schema({'id': String, 'createdAt': Int64, 'updatedAt': Int64, 'groupId': String, 'name': String, 'config': String, 'type': String})
### groupMemberships ###
spare_raw_input_schema_groupMemberships =  Schema({'id': String, 'createdAt': Int64, 'updatedAt': Int64, 'userId': String, 'groupId': String, 'group.name': String, 'user.id': String, 'user.firstName': String, 'user.lastName': String, 'user.email': String, 'user.phoneNumber': String, 'user.externalNumericId': Int64, 'metadata': String, 'status': Categorical, 'expiryTs': Int64, 'startTs': Int64, 'approvals': List(Struct({'type': String, 'fields.type': String, 'fields.min': UInt32, 'fields.max': UInt32})), 'groupConditionIds': List(String), 'conditions': List(Struct({'id': String, 'name': String}))})
### groups ###
spare_raw_input_schema_groups =  Schema({'id': String, 'createdAt': Int64, 'updatedAt': Int64, 'name': String, 'secretCode': String, 'description': String, 'status': String})
### letters ###
spare_raw_input_schema_letters =  Schema({'id': String, 'createdAt': Int64, 'updatedAt': Int64, 'name': String, 'content': String, 'caseTypeId': String, 'status': String, 'mailingAddressFieldId': String, 'fileNameTemplate': String})
### paymentMethodTypes ###
spare_raw_input_schema_paymentMethodTypes =  Schema({'id': String, 'createdAt': Int64, 'updatedAt': Int64, 'name': String, 'description': String, 'status': String, 'paymentProvider.id': String, 'paymentProvider.createdAt': Int64, 'paymentProvider.updatedAt': Int64, 'paymentProvider.type': String, 'paymentProvider.config': String})
### paymentMethods ###
spare_raw_input_schema_paymentMethods =  Schema({'id': String, 'createdAt': Int64, 'updatedAt': Int64, 'status': Categorical, 'userId': String, 'default': Boolean, 'connectedAccountType': Categorical, 'externalId': String, 'externalData': String, 'connectedAccountId': String, 'paymentMethodTypeId': Categorical, 'last4Digits': String, 'expiryMonth': UInt8, 'expiryYear': UInt16, 'brand': Categorical, 'balance': Int64, 'walletAutoTopUp.id': String, 'walletAutoTopUp.createdAt': Int64, 'walletAutoTopUp.updatedAt': Int64, 'walletAutoTopUp.paymentMethodId': String, 'walletAutoTopUp.amount': Int64, 'walletAutoTopUp.triggerAmount': Int64, 'walletAutoTopUp.createdInterface': Categorical, 'walletAutoTopUp.creatorId': String, 'user.firstName': String, 'user.lastName': String, 'user.email': String, 'user.phoneNumber': String, 'user.externalNumericId': Int64})
### quickReplies ###
spare_raw_input_schema_quickReplies =  Schema({'id': String, 'createdAt': Int64, 'updatedAt': Int64, 'type': String, 'text': String, 'order': String, 'status': String})
### requestConstraintOverrides ###
spare_raw_input_schema_requestConstraintOverrides =  Schema({'id': String, 'createdAt': Int64, 'updatedAt': Int64, 'requestId': String, 'actionId': String, 'previousPickupLateness': Int64, 'previousDropoffLateness': Int64, 'pickupOverride.type': Categorical, 'pickupOverride.constraint.max': Int64, 'pickupOverride.constraint.min': Int64, 'pickupOverride.constraint.desired': Int64, 'pickupOverride.scheduledTs': Int64, 'dropoffOverride.type': Categorical, 'dropoffOverride.constraint.max': Int64, 'dropoffOverride.constraint.min': Int64, 'dropoffOverride.constraint.desired': Int64, 'dropoffOverride.scheduledTs': Int64, 'dropoffOverride.constraint.direction': Categorical, 'dropoffOverride.constraint.maxOffset': Int64, 'dropoffOverride.newTimeInVehicle': Int64})
### requestConstraintOverrides_with_history ###
spare_raw_input_schema_requestConstraintOverrides_with_history =  Schema({'id': String, 'createdAt': Int64, 'updatedAt': Int64, 'requestId': String, 'actionId': String, 'previousPickupLateness': Int64, 'previousDropoffLateness': Int64, 'pickupOverride.type': Categorical, 'pickupOverride.constraint.max': Int64, 'pickupOverride.constraint.min': Int64, 'pickupOverride.constraint.desired': Int64, 'pickupOverride.scheduledTs': Int64, 'dropoffOverride.type': Categorical, 'dropoffOverride.constraint.max': Int64, 'dropoffOverride.constraint.min': Int64, 'dropoffOverride.constraint.desired': Int64, 'dropoffOverride.scheduledTs': Int64, 'dropoffOverride.constraint.direction': Categorical, 'dropoffOverride.constraint.maxOffset': Int64, 'dropoffOverride.newTimeInVehicle': Int64})
### requestRecurrences ###
spare_raw_input_schema_requestRecurrences =  Schema({'id': String, 'status': Categorical, 'riderId': String, 'serviceId': Categorical, 'service.name': Categorical, 'paymentMethodId': String, 'paymentMethodTypeId': Categorical, 'requestedPickupAddress': String, 'requestedPickupLocation.longitude': Float64, 'requestedPickupLocation.latitude': Float64, 'requestedDropoffAddress': String, 'requestedDropoffLocation.longitude': Float64, 'requestedDropoffLocation.latitude': Float64, 'riders': List(Struct({'type': String, 'count': UInt32})), 'accessibilityFeatures': List(Struct({'type': String, 'count': UInt32})), 'notes': String, 'requestMetadata': String, 'requestMetadata.sameDayTripReason': Categorical, 'outboundTime': Int32, 'outboundTimeIntent': Categorical, 'inboundTime': Int32, 'inboundTimeIntent': Categorical, 'startDate': String, 'endDate': String, 'days': List(Categorical), 'dayOverrides': List(Struct({'date': String, 'enableInbound': Boolean, 'enableOutbound': Boolean})), 'pickupNotes': String, 'dropoffNotes': String})
### requests ###
spare_raw_input_schema_requests =  Schema({'id': String, 'createdAt': Int64, 'updatedAt': Int64, 'riderId': String, 'status': Categorical, 'dispatchStatus': Categorical, 'requestedPickupAddress': String, 'requestedPickupLocation.longitude': Float64, 'requestedPickupLocation.latitude': Float64, 'scheduledPickupAddress': String, 'scheduledPickupLocation.longitude': Float64, 'scheduledPickupLocation.latitude': Float64, 'requestedPickupTs': Int64, 'initialScheduledPickupTs': Int64, 'scheduledPickupTs': Int64, 'requestedFlexibility': Int64, 'requestedDropoffAddress': String, 'requestedDropoffLocation.longitude': Float64, 'requestedDropoffLocation.latitude': Float64, 'scheduledDropoffAddress': String, 'scheduledDropoffLocation.longitude': Float64, 'scheduledDropoffLocation.latitude': Float64, 'requestedDropoffTs': Int64, 'initialScheduledDropoffTs': Int64, 'scheduledDropoffTs': Int64, 'statusChanges': List(Struct({'status': String, 'ts': Int64})), 'pickupWalkingDuration': Int64, 'dropoffWalkingDuration': Int64, 'travelDistance': Int64, 'travelDuration': Int64, 'travelDurationFlexibility': Int64, 'serviceId': String, 'driverId': String, 'vehicleId': String, 'dutyIdentifier': String, 'pickupEta': Int64, 'dropoffEta': Int64, 'priceCurrency': Categorical, 'matchCutoffTs': Int64, 'numRiders': Int64, 'metadata': String, 'notes': String, 'createdInterface': Categorical, 'accessibilityFeatures': List(Struct({'type': String, 'count': UInt32})), 'cancellationDetails.fault': Categorical, 'cancellationDetails.cancelledBy': Categorical, 'cancellationDetails.reason': String, 'cancellationDetails.notes': String, 'cancellationDetails.metadata': String, 'anonymized': Boolean, 'reviewByRider.id': String, 'reviewByDriver.id': String, 'shouldRiderReview': Boolean, 'paymentMethodId': String, 'paymentMethodTypeId': Categorical, 'paymentMethodType.name': Categorical, 'fare.cost': Int64, 'fare.discount': Int64, 'fare.total': Int64, 'fare.currency': String, 'fareRedemptions': List(Struct({'type': String, 'amount': Int64, 'currency': String})), 'riders': List(Struct({'type': String, 'count': UInt32})), 'dutyId': String, 'dropoffEtaLatest': Int64, 'prepaid': Boolean, 'access': Categorical, 'creatorId': String, 'representativeId': String, 'recurrenceId': String, 'serviceBrand.name': Categorical, 'serviceBrand.externalName': Categorical, 'intentType': Categorical, 'pickupCompletedTs': Int64, 'estimatedPickupTime.minTs': Int64, 'estimatedPickupTime.ts': Int64, 'estimatedPickupTime.maxTs': Int64, 'dropoffCompletedTs': Int64, 'estimatedDropoffTime.minTs': Int64, 'estimatedDropoffTime.ts': Int64, 'estimatedDropoffTime.maxTs': Int64, 'isExternallyDispatched': Boolean, 'externalUrl': String, 'lockedToDutyId': String, 'showPickupDropoffWindows': Boolean, 'fleet.id': Categorical, 'fleet.name': Categorical, 'lateness.pickupLateness': Int64, 'lateness.dropoffLateness': Int64, 'lateness.relevantLateness': Int64, 'pickupArrivedTs': Int64, 'dropoffArrivedTs': Int64, 'metrics.inVehicleTripDistance': Int64, 'metrics.travelDuration': Int64, 'metrics.waitTime': Int64, 'metrics.driverLocationOnMatch.longitude': Float64, 'metrics.driverLocationOnMatch.latitude': Float64, 'metrics.acceptedTs': Int64, 'metrics.deadheadToPickupM': Int64, 'matchedPickupWindow.min': Int64, 'matchedPickupWindow.desired': Int64, 'matchedPickupWindow.max': Int64, 'matchedDropoffWindow.min': Int64, 'matchedDropoffWindow.desired': Int64, 'matchedDropoffWindow.max': Int64, 'originalRequestedTs': Int64, 'completedPickupLocation.longitude': Float64, 'completedPickupLocation.latitude': Float64, 'completedPickupAddress': String, 'completedDropoffLocation.longitude': Float64, 'completedDropoffLocation.latitude': Float64, 'completedDropoffAddress': String, 'isManuallyReconciled': Boolean, 'pickupNotes': String, 'dropoffNotes': String, 'scheduledPickupStopId': String, 'scheduledDropoffStopId': String, 'scheduledPickupStopDescription': String, 'scheduledDropoffStopDescription': String, 'serviceProviderOrganizationId': Categorical, 'fixedRouteTravelDuration': Int64})
### requests_with_history ###
spare_raw_input_schema_requests_with_history =  Schema({'id': String, 'createdAt': Int64, 'updatedAt': Int64, 'riderId': String, 'status': Categorical, 'dispatchStatus': Categorical, 'requestedPickupAddress': String, 'requestedPickupLocation.longitude': Float64, 'requestedPickupLocation.latitude': Float64, 'scheduledPickupAddress': String, 'scheduledPickupLocation.longitude': Float64, 'scheduledPickupLocation.latitude': Float64, 'requestedPickupTs': Int64, 'initialScheduledPickupTs': Int64, 'scheduledPickupTs': Int64, 'requestedFlexibility': Int64, 'requestedDropoffAddress': String, 'requestedDropoffLocation.longitude': Float64, 'requestedDropoffLocation.latitude': Float64, 'scheduledDropoffAddress': String, 'scheduledDropoffLocation.longitude': Float64, 'scheduledDropoffLocation.latitude': Float64, 'requestedDropoffTs': Int64, 'initialScheduledDropoffTs': Int64, 'scheduledDropoffTs': Int64, 'statusChanges': List(Struct({'status': String, 'ts': Int64})), 'pickupWalkingDuration': Int64, 'dropoffWalkingDuration': Int64, 'travelDistance': Int64, 'travelDuration': Int64, 'travelDurationFlexibility': Int64, 'serviceId': String, 'driverId': String, 'vehicleId': String, 'dutyIdentifier': String, 'pickupEta': Int64, 'dropoffEta': Int64, 'priceCurrency': Categorical, 'matchCutoffTs': Int64, 'numRiders': Int64, 'metadata': String, 'notes': String, 'createdInterface': Categorical, 'accessibilityFeatures': List(Struct({'type': String, 'count': UInt32})), 'cancellationDetails.fault': Categorical, 'cancellationDetails.cancelledBy': Categorical, 'cancellationDetails.reason': String, 'cancellationDetails.notes': String, 'cancellationDetails.metadata': String, 'anonymized': Boolean, 'reviewByRider.id': String, 'reviewByDriver.id': String, 'shouldRiderReview': Boolean, 'paymentMethodId': String, 'paymentMethodTypeId': Categorical, 'paymentMethodType.name': Categorical, 'fare.cost': Int64, 'fare.discount': Int64, 'fare.total': Int64, 'fare.currency': String, 'fareRedemptions': List(Struct({'type': String, 'amount': Int64, 'currency': String})), 'riders': List(Struct({'type': String, 'count': UInt32})), 'dutyId': String, 'dropoffEtaLatest': Int64, 'prepaid': Boolean, 'access': Categorical, 'creatorId': String, 'representativeId': String, 'recurrenceId': String, 'serviceBrand.name': Categorical, 'serviceBrand.externalName': Categorical, 'intentType': Categorical, 'pickupCompletedTs': Int64, 'estimatedPickupTime.minTs': Int64, 'estimatedPickupTime.ts': Int64, 'estimatedPickupTime.maxTs': Int64, 'dropoffCompletedTs': Int64, 'estimatedDropoffTime.minTs': Int64, 'estimatedDropoffTime.ts': Int64, 'estimatedDropoffTime.maxTs': Int64, 'isExternallyDispatched': Boolean, 'externalUrl': String, 'lockedToDutyId': String, 'showPickupDropoffWindows': Boolean, 'fleet.id': Categorical, 'fleet.name': Categorical, 'lateness.pickupLateness': Int64, 'lateness.dropoffLateness': Int64, 'lateness.relevantLateness': Int64, 'pickupArrivedTs': Int64, 'dropoffArrivedTs': Int64, 'metrics.inVehicleTripDistance': Int64, 'metrics.travelDuration': Int64, 'metrics.waitTime': Int64, 'metrics.driverLocationOnMatch.longitude': Float64, 'metrics.driverLocationOnMatch.latitude': Float64, 'metrics.acceptedTs': Int64, 'metrics.deadheadToPickupM': Int64, 'matchedPickupWindow.min': Int64, 'matchedPickupWindow.desired': Int64, 'matchedPickupWindow.max': Int64, 'matchedDropoffWindow.min': Int64, 'matchedDropoffWindow.desired': Int64, 'matchedDropoffWindow.max': Int64, 'originalRequestedTs': Int64, 'completedPickupLocation.longitude': Float64, 'completedPickupLocation.latitude': Float64, 'completedPickupAddress': String, 'completedDropoffLocation.longitude': Float64, 'completedDropoffLocation.latitude': Float64, 'completedDropoffAddress': String, 'isManuallyReconciled': Boolean, 'pickupNotes': String, 'dropoffNotes': String, 'scheduledPickupStopId': String, 'scheduledDropoffStopId': String, 'scheduledPickupStopDescription': String, 'scheduledDropoffStopDescription': String, 'serviceProviderOrganizationId': Categorical, 'fixedRouteTravelDuration': Int64})
### riders ###
spare_raw_input_schema_riders =  Schema({'id': String, 'createdAt': Int64, 'updatedAt': Int64, 'email': String, 'isEmailVerified': Boolean, 'useEmailAuthentication': Boolean, 'firstName': String, 'lastName': String, 'photoUrl': String, 'phoneNumber': String, 'isPhoneNumberVerified': Boolean, 'usePhoneNumberAuthentication': Boolean, 'metadata': String, 'defaultRequestMetadata': String, 'defaultPaymentMethodId': String, 'defaultPaymentMethodType': Categorical, 'defaultRiders': List(Struct({'type': String, 'count': UInt32})), 'defaultAccessibilityFeatures': List(Struct({'type': String, 'count': UInt32})), 'defaultNotes': String, 'externalNumericId': Int64, 'channelPreference': Categorical, 'languagePreference': Categorical, 'notificationPreference': List(Categorical), 'fraudLevel': Categorical, 'status': Categorical, 'archivedInterface': Categorical, 'archivedTs': Int64})
### services ###
spare_raw_input_schema_services =  Schema({'id': String, 'createdAt': Int64, 'updatedAt': Int64, 'name': String, 'externalName': String, 'description': String, 'startDate': String, 'endDate': String, 'timeRules': List(Struct({'startTs': Int64, 'endTs': Int64, 'days': String})), 'baseBoardingTime': Int64, 'status': String, 'timezone': String, 'accessibilityFeatures': List(Struct({'type': String, 'defaultExtraBoardingTime': Int64})), 'timeRuleOverrides': List(Struct({'date': String, 'rules': List(Struct({'startTs': Int64, 'endTs': Int64}))})), 'riderTypes': List(String), 'detourFlexibilitySeconds': Int64, 'minAdvanceBookingType': String, 'minAdvanceBookingSeconds': Int64, 'minAdvanceBookingTimeOfDay': Int64, 'allowAdminOverrideMinAdvanceBooking': Boolean, 'maxAdvanceBookingDays': Int64, 'allowAdminOverrideMaxAdvanceBooking': Boolean, 'nextAvailableFlexibility': Int64, 'linkedFleets': List(Struct({'id': String, 'name': String, 'type': String})), 'metadata': String, 'acceptedFlexLeaveAtForward': Int64, 'acceptedFlexLeaveAtBackward': Int64, 'acceptedFlexArriveByBackward': Int64, 'arriveByPickupConstraintFlex': Int64, 'arriveByPickupConstraintType': String, 'scheduledSearchFlexLeaveAtForward': Int64, 'scheduledSearchFlexLeaveAtBackward': Int64, 'scheduledSearchFlexArriveByBackward': Int64, 'recurringTripFlexLeaveAtForward': Int64, 'recurringTripFlexLeaveAtBackward': Int64, 'recurringTripFlexArriveByBackward': Int64, 'enabledPaymentMethodTypes': List(String), 'brandImageUrl': String, 'maxRiders': Int64, 'fareRuleId': String, 'recurringTripCreationDeadlineDays': Int64, 'maxConstraintOverride': Int64, 'fleetPriorityWaitSeconds': Int64, 'startTryingToMatchOffset': Int64, 'stopTryingToMatchOffset': Int64, 'availableToInterfaces': List(String), 'allowUnmatchedRequests': Boolean, 'allowCreatingNewUnmatchedRequests': List(String), 'hasCustomFare': Boolean, 'leaveAtNumberOfFallbacksForward': Int64, 'leaveAtNumberOfFallbacksBackward': Int64, 'arriveByNumberOfFallbacksBackward': Int64, 'arriveByWindowsBuffer': Int64, 'allowedAdminTripTypes': List(String), 'recurringTripArriveByWindowsBuffer': Int64, 'minimumAllowedDetour': Int64, 'maximumAllowedTimeInVehicle': Int64, 'detourMultiplier': Float64})
### stops ###
spare_raw_input_schema_stops =  Schema({'id': String, 'createdAt': Int64, 'updatedAt': Int64, 'code': String, 'name': String, 'description': String, 'internalDescription': String, 'longitude': Float64, 'latitude': Float64, 'wheelchairBoarding': Boolean, 'isVisibleToRiderApp': Boolean, 'isTransitHub': Boolean, 'isEnabled': Boolean, 'zoneIds': List(String), 'icon': String, 'importance': Int64, 'imageUrl': String})
### timeRules ###
spare_raw_input_schema_timeRules =  Schema({'id': String, 'createdAt': Int64, 'updatedAt': Int64, 'rules': List(Struct({'startTs': Int64, 'endTs': Int64, 'days': String})), 'ruleOverrides': List(Struct({'date': String, 'rules': List(Struct({'startTs': Int64, 'endTs': Int64}))})), 'name': String})
### userBans ###
spare_raw_input_schema_userBans =  Schema({'id': String, 'createdAt': Int64, 'updatedAt': Int64, 'banReason': String, 'banStartTs': Int64, 'banExpiryTs': Int64, 'userId': String, 'isExpired': Boolean, 'phoneNumber': String, 'type': Categorical})
### userFleetAgreements ###
spare_raw_input_schema_userFleetAgreements =  Schema({'id': String, 'createdAt': Int64, 'updatedAt': Int64, 'fleetStub.id': Categorical, 'fleetStub.name': Categorical, 'userId': String, 'agreed': Boolean, 'lastAskedTs': Int64, 'creatorId': String, 'createdInterface': Categorical})
### vehicleTypes ###
spare_raw_input_schema_vehicleTypes =  Schema({'id': String, 'createdAt': Int64, 'updatedAt': Int64, 'name': String, 'spots': List(Struct({'options': List(Struct({'type': String, 'count': Int64, 'canCommingle': Boolean, 'canAccomodateRider': Boolean, 'accessibilityFeature': String})), 'description': String})), 'filoFeatures': List(String), 'vehicleClass': String})
### vehicles ###
spare_raw_input_schema_vehicles =  Schema({'id': String, 'identifier': String, 'ownerUserId': String, 'ownerType': String, 'make': String, 'model': String, 'color': String, 'licensePlate': String, 'passengerSeats': UInt32, 'accessibilityFeatures': List(Struct({'type': String, 'count': UInt32, 'seatCost': UInt32, 'requireFirstInLastOut': Boolean})), 'status': String, 'metadata': String, 'metadata.vin': String, 'metadata.providerId': Categorical, 'metadata.owner': Categorical, 'metadata.year': UInt32, 'metadata.comments': String, 'emissionsRate': UInt64, 'vehicleTypeId': String, 'capacityType': String, 'createdAt': UInt64, 'updatedAt': UInt64, 'photoUrl': String})
### walletTransactions ###
spare_raw_input_schema_walletTransactions =  Schema({'id': String, 'createdAt': Int64, 'updatedAt': Int64, 'userId': String, 'amountChanged': Int64, 'type': Categorical, 'notes': String, 'tripRequestedPickupTs': Int64, 'requestId': String, 'charge.id': String, 'charge.externalId': String, 'charge.status': Categorical, 'creatorId': String, 'user.externalNumericId': Int64, 'creatorAdmin.id': String, 'creatorAdmin.email': String, 'createdInterface': Categorical, 'paymentMethodId': String})
### walletTransactions_with_history ###
spare_raw_input_schema_walletTransactions_with_history =  Schema({'id': String, 'createdAt': Int64, 'updatedAt': Int64, 'userId': String, 'amountChanged': Int64, 'type': Categorical, 'notes': String, 'tripRequestedPickupTs': Int64, 'requestId': String, 'charge.id': String, 'charge.externalId': String, 'charge.status': Categorical, 'creatorId': String, 'user.externalNumericId': Int64, 'creatorAdmin.id': String, 'creatorAdmin.email': String, 'createdInterface': Categorical, 'paymentMethodId': String})
### zones ###
spare_raw_input_schema_zones =  Schema({'id': String, 'createdAt': Int64, 'updatedAt': Int64, 'serviceId': String, 'name': String, 'area': String, 'direction': String, 'type': String, 'groupIds': List(String), 'timeRuleId': String, 'isVisibleToRiderApp': Boolean, 'externalId': String, 'stopIds': List(String)})
### appointments ###
spare_raw_input_schema_appointments =  Schema({'id': String, 'createdAt': Int64, 'updatedAt': Int64, 'appointmentTypeId': Categorical, 'caseId': String, 'caseFormId': String, 'adminId': String, 'bookingId': String, 'eventId': String, 'startTs': Int64, 'endTs': Int64, 'status': Categorical})
### caseForms ###
spare_raw_input_schema_caseForms =  Schema({'id': String, 'createdAt': Int64, 'updatedAt': Int64, 'caseId': String, 'formId': Categorical, 'metadata': String, 'smartScanFile.id': String, 'smartScanFile.size': Int64, 'smartScanFile.name': String, 'smartScanFile.format': Categorical})
### caseLetters ###
spare_raw_input_schema_caseLetters =  Schema({'id': String, 'createdAt': Int64, 'updatedAt': Int64, 'caseId': String, 'letterId': Categorical, 'file.id': String, 'file.size': Int64, 'file.name': String, 'file.format': Categorical, 'creatorId': String, 'status': Categorical, 'sentStatus': Categorical, 'sentTs': Int64, 'sentById': String, 'mailingAddress': String})
### cases ###
spare_raw_input_schema_cases =  Schema({'id': String, 'createdAt': Int64, 'updatedAt': Int64, 'lastActivityAt': Int64, 'userId': String, 'caseTypeId': Categorical, 'statusId': Categorical, 'assignedTo': String, 'note': String, 'timerLimitTs': Int64, 'timerEvent': List(Struct({'type': String, 'eventTs': Int64})), 'timerDeadlineTs': Int64, 'isArchived': Boolean, 'createdInterface': Categorical, 'priority': Categorical})
### charges ###
spare_raw_input_schema_charges =  Schema({'id': String, 'createdAt': Int64, 'updatedAt': Int64, 'amount': Int64, 'currency': Categorical, 'refundReason': String, 'refundedTs': Int64, 'status': Categorical, 'userId': String, 'paymentMethodId': String, 'externalId': String, 'externalData': String, 'requestId': String, 'farePassAllocationId': String, 'walletId': String, 'ticketId': String, 'groupChargeId': String, 'childChargeIds': List(String)})
### constraintOverrideActions ###
spare_raw_input_schema_constraintOverrideActions =  Schema({'id': String, 'createdAt': Int64, 'updatedAt': Int64, 'requestId': String, 'authorId': String, 'actorType': Categorical})
### duties ###
spare_raw_input_schema_duties =  Schema({'id': String, 'createdAt': Int64, 'updatedAt': Int64, 'identifier': String, 'fleetId': String, 'fleet.name': String, 'vehicleId': String, 'vehicle.identifier': String, 'vehicle.licensePlate': String, 'vehicle.vehicleTypeId': Categorical, 'driverId': String, 'startRequestedTs': Int64, 'endRequestedTs': Int64, 'status': Categorical, 'startFlexibility': Int64, 'startLocation.longitude': Float64, 'startLocation.latitude': Float64, 'startAddress': String, 'endFlexibility': Int64, 'endLocation.longitude': Float64, 'endLocation.latitude': Float64, 'endAddress': String, 'isDeletable': Boolean, 'isMatchingEnabled': Boolean, 'hasVehicleConflict': Boolean, 'hasDriverConflict': Boolean, 'matchingDisabledEndTs': Int64, 'matchingLogic': Categorical, 'lateness': Int64, 'ownerType': Categorical, 'externalDriverData.firstName': String, 'externalDriverData.photoUrl': String, 'externalDriverData.phoneNumber': String, 'appVersion': String, 'deviceOS': String, 'metadata': String, 'metrics.firstSeenInServiceAreaTs': Int64, 'metrics.lastSeenInServiceAreaTs': Int64, 'metrics.totalRevenueHoursS': Int64, 'metrics.totalRevenueHoursSV2': Int64, 'metrics.totalBreakLengthS': Int64, 'metrics.totalInProgressPauseLengthS': Int64, 'metrics.totalTravelDistanceM': Int64, 'metrics.totalDistanceWithoutRidersM': Int64, 'metrics.totalRevenueDistanceM': Int64, 'metrics.totalBreakDistanceM': Int64, 'cancellationDetails.id': String, 'cancellationDetails.createdAt': Int64, 'cancellationDetails.updatedAt': Int64, 'cancellationDetails.cancelledBy': Categorical, 'cancellationDetails.reason': Categorical, 'cancellationDetails.notes': String})
### favoriteLocations ###
spare_raw_input_schema_favoriteLocations =  Schema({'id': String, 'createdAt': Int64, 'updatedAt': Int64, 'address': String, 'location.longitude': Float64, 'location.latitude': Float64, 'type': Categorical, 'userId': String, 'name': String, 'locationNotes': String})
### groupMemberships ###
spare_raw_input_schema_groupMemberships =  Schema({'id': String, 'createdAt': Int64, 'updatedAt': Int64, 'userId': String, 'groupId': String, 'group.name': String, 'user.id': String, 'user.firstName': String, 'user.lastName': String, 'user.email': String, 'user.phoneNumber': String, 'user.externalNumericId': Int64, 'metadata': String, 'status': Categorical, 'expiryTs': Int64, 'startTs': Int64, 'approvals': List(Struct({'type': String, 'fields.type': String, 'fields.min': UInt32, 'fields.max': UInt32})), 'groupConditionIds': List(String), 'conditions': List(Struct({'id': String, 'name': String}))})
### paymentMethods ###
spare_raw_input_schema_paymentMethods =  Schema({'id': String, 'createdAt': Int64, 'updatedAt': Int64, 'status': Categorical, 'userId': String, 'default': Boolean, 'connectedAccountType': Categorical, 'externalId': String, 'externalData': String, 'connectedAccountId': String, 'paymentMethodTypeId': Categorical, 'last4Digits': String, 'expiryMonth': UInt8, 'expiryYear': UInt16, 'brand': Categorical, 'balance': Int64, 'walletAutoTopUp.id': String, 'walletAutoTopUp.createdAt': Int64, 'walletAutoTopUp.updatedAt': Int64, 'walletAutoTopUp.paymentMethodId': String, 'walletAutoTopUp.amount': Int64, 'walletAutoTopUp.triggerAmount': Int64, 'walletAutoTopUp.createdInterface': Categorical, 'walletAutoTopUp.creatorId': String, 'user.firstName': String, 'user.lastName': String, 'user.email': String, 'user.phoneNumber': String, 'user.externalNumericId': Int64})
### requestConstraintOverrides ###
spare_raw_input_schema_requestConstraintOverrides =  Schema({'id': String, 'createdAt': Int64, 'updatedAt': Int64, 'requestId': String, 'actionId': String, 'previousPickupLateness': Int64, 'previousDropoffLateness': Int64, 'pickupOverride.type': Categorical, 'pickupOverride.constraint.max': Int64, 'pickupOverride.constraint.min': Int64, 'pickupOverride.constraint.desired': Int64, 'pickupOverride.scheduledTs': Int64, 'dropoffOverride.type': Categorical, 'dropoffOverride.constraint.max': Int64, 'dropoffOverride.constraint.min': Int64, 'dropoffOverride.constraint.desired': Int64, 'dropoffOverride.scheduledTs': Int64, 'dropoffOverride.constraint.direction': Categorical, 'dropoffOverride.constraint.maxOffset': Int64, 'dropoffOverride.newTimeInVehicle': Int64})
### requestRecurrences ###
spare_raw_input_schema_requestRecurrences =  Schema({'id': String, 'status': Categorical, 'riderId': String, 'serviceId': Categorical, 'service.name': Categorical, 'paymentMethodId': String, 'paymentMethodTypeId': Categorical, 'requestedPickupAddress': String, 'requestedPickupLocation.longitude': Float64, 'requestedPickupLocation.latitude': Float64, 'requestedDropoffAddress': String, 'requestedDropoffLocation.longitude': Float64, 'requestedDropoffLocation.latitude': Float64, 'riders': List(Struct({'type': String, 'count': UInt32})), 'accessibilityFeatures': List(Struct({'type': String, 'count': UInt32})), 'notes': String, 'requestMetadata': String, 'requestMetadata.sameDayTripReason': Categorical, 'outboundTime': Int32, 'outboundTimeIntent': Categorical, 'inboundTime': Int32, 'inboundTimeIntent': Categorical, 'startDate': String, 'endDate': String, 'days': List(Categorical), 'dayOverrides': List(Struct({'date': String, 'enableInbound': Boolean, 'enableOutbound': Boolean})), 'pickupNotes': String, 'dropoffNotes': String})
### requests ###
spare_raw_input_schema_requests =  Schema({'id': String, 'createdAt': Int64, 'updatedAt': Int64, 'riderId': String, 'status': Categorical, 'dispatchStatus': Categorical, 'requestedPickupAddress': String, 'requestedPickupLocation.longitude': Float64, 'requestedPickupLocation.latitude': Float64, 'scheduledPickupAddress': String, 'scheduledPickupLocation.longitude': Float64, 'scheduledPickupLocation.latitude': Float64, 'requestedPickupTs': Int64, 'initialScheduledPickupTs': Int64, 'scheduledPickupTs': Int64, 'requestedFlexibility': Int64, 'requestedDropoffAddress': String, 'requestedDropoffLocation.longitude': Float64, 'requestedDropoffLocation.latitude': Float64, 'scheduledDropoffAddress': String, 'scheduledDropoffLocation.longitude': Float64, 'scheduledDropoffLocation.latitude': Float64, 'requestedDropoffTs': Int64, 'initialScheduledDropoffTs': Int64, 'scheduledDropoffTs': Int64, 'statusChanges': List(Struct({'status': String, 'ts': Int64})), 'pickupWalkingDuration': Int64, 'dropoffWalkingDuration': Int64, 'travelDistance': Int64, 'travelDuration': Int64, 'travelDurationFlexibility': Int64, 'serviceId': String, 'driverId': String, 'vehicleId': String, 'dutyIdentifier': String, 'pickupEta': Int64, 'dropoffEta': Int64, 'priceCurrency': Categorical, 'matchCutoffTs': Int64, 'numRiders': Int64, 'metadata': String, 'notes': String, 'createdInterface': Categorical, 'accessibilityFeatures': List(Struct({'type': String, 'count': UInt32})), 'cancellationDetails.fault': Categorical, 'cancellationDetails.cancelledBy': Categorical, 'cancellationDetails.reason': String, 'cancellationDetails.notes': String, 'cancellationDetails.metadata': String, 'anonymized': Boolean, 'reviewByRider.id': String, 'reviewByDriver.id': String, 'shouldRiderReview': Boolean, 'paymentMethodId': String, 'paymentMethodTypeId': Categorical, 'paymentMethodType.name': Categorical, 'fare.cost': Int64, 'fare.discount': Int64, 'fare.total': Int64, 'fare.currency': String, 'fareRedemptions': List(Struct({'type': String, 'amount': Int64, 'currency': String})), 'riders': List(Struct({'type': String, 'count': UInt32})), 'dutyId': String, 'dropoffEtaLatest': Int64, 'prepaid': Boolean, 'access': Categorical, 'creatorId': String, 'representativeId': String, 'recurrenceId': String, 'serviceBrand.name': Categorical, 'serviceBrand.externalName': Categorical, 'intentType': Categorical, 'pickupCompletedTs': Int64, 'estimatedPickupTime.minTs': Int64, 'estimatedPickupTime.ts': Int64, 'estimatedPickupTime.maxTs': Int64, 'dropoffCompletedTs': Int64, 'estimatedDropoffTime.minTs': Int64, 'estimatedDropoffTime.ts': Int64, 'estimatedDropoffTime.maxTs': Int64, 'isExternallyDispatched': Boolean, 'externalUrl': String, 'lockedToDutyId': String, 'showPickupDropoffWindows': Boolean, 'fleet.id': Categorical, 'fleet.name': Categorical, 'lateness.pickupLateness': Int64, 'lateness.dropoffLateness': Int64, 'lateness.relevantLateness': Int64, 'pickupArrivedTs': Int64, 'dropoffArrivedTs': Int64, 'metrics.inVehicleTripDistance': Int64, 'metrics.travelDuration': Int64, 'metrics.waitTime': Int64, 'metrics.driverLocationOnMatch.longitude': Float64, 'metrics.driverLocationOnMatch.latitude': Float64, 'metrics.acceptedTs': Int64, 'metrics.deadheadToPickupM': Int64, 'matchedPickupWindow.min': Int64, 'matchedPickupWindow.desired': Int64, 'matchedPickupWindow.max': Int64, 'matchedDropoffWindow.min': Int64, 'matchedDropoffWindow.desired': Int64, 'matchedDropoffWindow.max': Int64, 'originalRequestedTs': Int64, 'completedPickupLocation.longitude': Float64, 'completedPickupLocation.latitude': Float64, 'completedPickupAddress': String, 'completedDropoffLocation.longitude': Float64, 'completedDropoffLocation.latitude': Float64, 'completedDropoffAddress': String, 'isManuallyReconciled': Boolean, 'pickupNotes': String, 'dropoffNotes': String, 'scheduledPickupStopId': String, 'scheduledDropoffStopId': String, 'scheduledPickupStopDescription': String, 'scheduledDropoffStopDescription': String, 'serviceProviderOrganizationId': Categorical, 'fixedRouteTravelDuration': Int64})
### riders ###
spare_raw_input_schema_riders =  Schema({'id': String, 'createdAt': Int64, 'updatedAt': Int64, 'email': String, 'isEmailVerified': Boolean, 'useEmailAuthentication': Boolean, 'firstName': String, 'lastName': String, 'photoUrl': String, 'phoneNumber': String, 'isPhoneNumberVerified': Boolean, 'usePhoneNumberAuthentication': Boolean, 'metadata': String, 'defaultRequestMetadata': String, 'defaultPaymentMethodId': String, 'defaultPaymentMethodType': Categorical, 'defaultRiders': List(Struct({'type': String, 'count': UInt32})), 'defaultAccessibilityFeatures': List(Struct({'type': String, 'count': UInt32})), 'defaultNotes': String, 'externalNumericId': Int64, 'channelPreference': Categorical, 'languagePreference': Categorical, 'notificationPreference': List(Categorical), 'fraudLevel': Categorical, 'status': Categorical, 'archivedInterface': Categorical, 'archivedTs': Int64})
### userFleetAgreements ###
spare_raw_input_schema_userFleetAgreements =  Schema({'id': String, 'createdAt': Int64, 'updatedAt': Int64, 'fleetStub.id': Categorical, 'fleetStub.name': Categorical, 'userId': String, 'agreed': Boolean, 'lastAskedTs': Int64, 'creatorId': String, 'createdInterface': Categorical})
### vehicleLocations ###
spare_raw_input_schema_vehicleLocations =  Schema({'vehicleId': String, 'dutyId': String, 'longitude': Float64, 'latitude': Float64, 'earliestLocationUpdatedTs': Int64, 'latestLocationUpdatedTs': Int64, 'bearing': Int16, 'isRoutable': Boolean})
### walletTransactions ###
spare_raw_input_schema_walletTransactions =  Schema({'id': String, 'createdAt': Int64, 'updatedAt': Int64, 'userId': String, 'amountChanged': Int64, 'type': Categorical, 'notes': String, 'tripRequestedPickupTs': Int64, 'requestId': String, 'charge.id': String, 'charge.externalId': String, 'charge.status': Categorical, 'creatorId': String, 'user.externalNumericId': Int64, 'creatorAdmin.id': String, 'creatorAdmin.email': String, 'createdInterface': Categorical, 'paymentMethodId': String})
